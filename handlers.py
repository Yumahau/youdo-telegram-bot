from aiogram import types, F
from aiogram import Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import add_task, get_executors

router = Router()

@router.message(F.text == "/start")
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="client")],
        [InlineKeyboardButton(text="üõ† –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="executor")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã?", reply_markup=keyboard)

@router.callback_query(F.data == "executor")
async def handle_executor(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    add_task("executors", user_id)
    await callback.message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å!")

@router.callback_query(F.data == "client")
async def handle_client(callback: types.CallbackQuery):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")

@router.message()
async def get_task(message: types.Message):
    desc = message.text
    add_task("tasks", desc)
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ. –°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")

    executors = get_all_executors()
    username = message.from_user.username or "–∞–Ω–æ–Ω–∏–º"
    for uid in executors:
        btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"respond_{message.from_user.id}")]
        ])
        try:
            await message.bot.send_message(
                uid,
                f"üì¢ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç @{username}:\n\n{desc}",
                reply_markup=btn
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

def register_handlers(dp):
    dp.include_router(router)
